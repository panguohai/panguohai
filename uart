#define _UART_TXRX_INTERRUPT_C_

// Files includes
#include "uart_txrx_interrupt.h"



__IO u8 sSendBuf[RECVBUFLENGTH] = {0u}; //发送缓存区
__IO u8 sRecvBuf[RECVBUFLENGTH] = {0u};//接收缓存区

u8  UART_SendLen = 0u;  //发送长度
u8  UART_SendRealCnt = 0u;//发送计数器
u8  UART_RecvLen = 0u;//接收长度
u8  UART_RecvRealCnt = 0u;//接收计数器
u8  UART_RecvComplete = 0u;//接收完成标志位
u8 Recv_Buffer_Overflow = 0u; //发送缓冲区溢出标志
u8 Send_Buffer_Overflow =0u ; //接收缓冲区溢出标志


////////////////////////////////////////////////////////////////////////////////
/// @功能：  UART1 PA9 PA10引脚的初始化
/// @日期：  2021. 5.26
/// @参数：  无
/// @返回值 ：无
////////////////////////////////////////////////////////////////////////////////
void UART1_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBENR_GPIOA, ENABLE);

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);

    //UART1_TX   GPIOA.9
    GPIO_StructInit(&GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    //UART1_RX    GPIOA.10
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_FLOATING;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}


////////////////////////////////////////////////////////////////////////////////
/// @功能：  UART1 串口配置以及中断初始化
/// @日期：  2021. 5.26
/// @参数：  baudrate ：波特率
/// @返回值 ：无
////////////////////////////////////////////////////////////////////////////////
void UART1_NVIC_Init(u32 baudrate)
{
    UART_InitTypeDef UART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_UART1, ENABLE);

    //UART1 NVIC
    NVIC_InitStructure.NVIC_IRQChannel = UART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 2;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    //Baud rate
    UART_StructInit(&UART_InitStructure);
    UART_InitStructure.BaudRate = baudrate;
    //The word length is in 8-bit data format.
    UART_InitStructure.WordLength = UART_WordLength_8b;
    UART_InitStructure.StopBits = UART_StopBits_1;
    //No even check bit.
    UART_InitStructure.Parity = UART_Parity_No;
    //No hardware data flow control.
    UART_InitStructure.HWFlowControl = UART_HWFlowControl_None;
    UART_InitStructure.Mode = UART_Mode_Rx | UART_Mode_Tx;

    UART_Init(UART1, &UART_InitStructure);
    UART_ITConfig(UART1, UART_IT_RXIEN|UART_OVER_ERR|UART_IER_RXFERR, ENABLE);//使能接收中断，接收溢出中断中断，接收帧错误中断。
    UART_Cmd(UART1, ENABLE);

    UART1_GPIO_Init();

}

////////////////////////////////////////////////////////////////////////////////
/// @功能：  UART1 串口接收，发送，错误帧和溢出帧中断函数
/// @日期：  2021. 5.26
/// @参数：  无
/// @返回值 ：无
////////////////////////////////////////////////////////////////////////////////
void UART1_IRQHandler(void)
{

	u8 Recv_error;

	 // Error packet
	if (UART_GetITStatus(UART1, UART_ISR_RXFERR_INTF) != RESET \
		|| UART_GetITStatus(UART1, UART_ISR_RXOERR_INTF) != RESET) //查询帧接收错误和溢出标，1为错误，0为没有错误
	{
		Recv_error =  UART_ReceiveData(UART1);
		UART_ClearITPendingBit(UART1, UART_IER_RXFERREN \
				              | UART_IER_RXOERREN | UART_ISR_RX);//清除标志位
		UART_RecvRealCnt = 0u;
	}
	else if (UART_GetITStatus(UART1, UART_ISR_RX) != RESET)//接收有效数据标志位
	{
		UART_ClearITPendingBit(UART1, UART_ISR_RX);
		Receive_packet();
	}
	else
	{
		/* none */
	}

	// Send packet
	if (UART_GetITStatus(UART1, UART_ISR_TX) != RESET)//发送位移完成中断标志位
	 {
		UART_ClearITPendingBit(UART1, UART_ISR_TX);
		Send_packet();
	 }
	// Recv packet

}


////////////////////////////////////////////////////////////////////////////////
/// @功能：  UART1 串口分包接收
/// @日期：  2021. 5.26
/// @参数：  无
/// @返回值 ：无
////////////////////////////////////////////////////////////////////////////////
void Receive_packet(void)
{
	u8 recvbyte;
	recvbyte = UART_ReceiveData(UART1);
	Uart1_have_recvdata = UART1_TIM1_Count;
	sRecvBuf [UART_RecvRealCnt] = recvbyte;
	if(UART_RecvRealCnt < RECVBUFLENGTH-1)
	{
		UART_RecvRealCnt ++;
	}
	else
	{
		UART_RecvRealCnt= 0u;
		Recv_Buffer_Overflow = 1u;
	}

}

////////////////////////////////////////////////////////////////////////////////
/// @功能：  UART1 串口分包发送
/// @日期：  2021. 5.26
/// @参数：  无
/// @返回值 ：无
////////////////////////////////////////////////////////////////////////////////
void Send_packet(void)
{
   	if(UART_RecvComplete ==1u)
   	{
		memcpy((u8*)&sSendBuf[0], (u8*)&sRecvBuf[0], UART_SendLen);
		if(UART_SendRealCnt < RECVBUFLENGTH-1)
		{
			UART_SendData(UART1, sSendBuf[UART_SendRealCnt]);
			UART_SendRealCnt++;
			if((UART_SendRealCnt >= UART_SendLen))
			{
				UART_SendRealCnt = 0u;
				UART_SendLen = 0u;
				UART_RecvComplete = 0u;
				UART_ITConfig(UART1, UART_IT_TXIEN, DISABLE);
			}
		}
		else
		{
			UART_SendRealCnt = 0u;
			Send_Buffer_Overflow = 1u;
		}
   	}

}

